# conf for yaws


# first we have a set of globals
# That apply to all virtual servers


# This is the directory where all logfiles for
# all virtual servers will be written

logdir = /var/log/yaws


# This the path to a directory where additional
# beam code can be placed. The daemon will add this
# directory to its search path

ebin_dir = /usr/lib/yaws/ebin


# This is a directory where application specific .hrl
# files can be placed. application specifig .yaws code can
# then include these .hrl files

include_dir = /usr/lib/yaws/include


# This is a debug variable, possible values are http | traffic | false
# It is also possible to set the trace (possibly to the tty) while
# invoking yaws from the shell as in
# yaws -i -T -x (see man yaws)

trace = false


# it is possible to have yaws start additional 
# application specific code at startup

# runmod = my_app


# By default yaws will copy the erlang error_log and
# end write it to a wrap log called report.log (in the logdir)
# this feature can be turned off. This would typically
# be the case when yaws runs within another larger app

copy_error_log = true


# Logs are wrap logs

log_wrap_size = 1000000


# Possibly resolve all hostnames in logfiles so webalizer
# can produce the nice geography piechart

log_resolve_hostname = false


# fail completely or not if yaws fails 
# to bind a listen socket

fail_on_bind_err = true


# If HTTP auth is used, it is possible to have a specific
# auth log.

auth_log = true


# When we're running multiple yaws systems on the same 
# host, we need to give each yaws system an individual
# name. Yaws will write a number of runtime files under
# /tmp/yaws/${id}
# The default value is "default"
#
# In Debian system init script supplies id from the command
# line, so it's not necessary to specify it here

#id = debian_yaws


# earlier versions of Yaws picked the first virtual host
# in a list of hosts with the same IP/PORT when the Host:
# header doesn't match any name on any Host
# This is often nice in testing environments but not
# acceptable in real live hosting scenarios

pick_first_virthost_on_nomatch = true


# All unices are broken since it's not possible to bind to
# a privileged port (< 1024) unless uid==0
# There is a contrib in jungerl which makes it possible by means 
# of an external setuid root programm called fdsrv to listen to
# to privileged port.
# If we use this feature, it requires fdsrv to be properly installed.
# Doesn't yet work with SSL.

use_fdsrv = false

# Load external config files. To add virtual server, don't
# edit this config file. Instead, put additional config to
# /etc/yaws/config.d/ and it will be sourced during yaws
# reload.

subconfigdir = /etc/yaws/conf.d

# End then a set of virtual server examples
# (If you want to use privileged port, run yaws as root,
# setting YAWS_USER in /etc/default/yaws, or use port
# redirection, e.g. via iptables.)

# All virtual server examples are commented out.

# First two virthosted servers on the same IP (0.0.0.0)
# in this case, but an explicit IP can be given as well

#<server www>
#    port = 8080
#    listen = 0.0.0.0
#    docroot = /var/www/yaws
#    docroot = /home/houdini/myErlang/math_in_html/m
#</server>

#<server localhost>
#    port = 8080
#    listen = 0.0.0.0
#    docroot = /var/www/yaws-webdav
#    dir_listings = true
#    dav = true
#    <auth>
#        realm = foobar
#        dir = /
#        user = foo:bar
#        user = baz:bar
#    </auth>
#</server>


# And then an ssl server

#<server www>
#    port = 8443
#    docroot = /var/www/yaws-ssl
#    listen = 0.0.0.0
#    dir_listings = true
#    <ssl>  
#        keyfile = /etc/yaws/yaws-key.pem
#        certfile = /etc/yaws/yaws-cert.pem
#    </ssl>
#</server>

